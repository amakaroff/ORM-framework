                                ORM-framework
                          version 1.0, February 2017
                                Documentation
    1.  It is necessary to create property file persistence.properties
        with following content:

        driver="database driver"
        login="database login"
        password="database password"
        url="url database"

    2.  To display java-entity in the database you should mark it with an annotation
       	@Table, also necessary fields of the entity should be marked with an annotation
        @Column. Appropriate tables and fields of the database should be specified inside
        annotations @Table and @Column. Use annotations @OneToOne, @OneToMany, @ManyToOne
        and @JoinColumn to connect foreign keys with primary keys.
   
    3.  Annotations @OneToOne, @OneToMany and @ManyToOne specify ways of loading
	    given entity from the database:
        FetchType.LAZY - for lazy initialization;
	    FetchType.EAGER - for eager initialization.
	    To join the current entity with another by some field you must specify this field
	    in the annotations.

    4.  Obtaining database connection without entity mapping is done by getConnection() method 
	    from DataSourceLoader class.

    5.  Basic work with database tables is done in the class
        QueryExecutor using methods save, findOne, findSome and executeQuery.

    6.  Dynamic interface creating:
        Method implement from RepositoriesFactory class is used to create dynamic interfaces (interface
        is passed to the method).
        Method signature in the interface is marked by @Query annotation, where query is actually placed. 
	    The query specifies passed parameters in the form of {parameter name}.
	    Also you can mark the appropriate parameter of the method with annotation @Param with
	    the name of the corresponding parameter.

        For example:
        @Query (SELECT * FROM entity WHERE id={id} AND name={name})
        Entity selectEntity(@Param("id") int id, @Param("name") String name);

        Also interface implementation allows to generate sql-query
        by method name, if the name consists of the key words.

        List of key words:
        find, save, delete, update, From,  And, Or, By, Between, Set, Left, Right, Inner, Join, On,
        OrderBy, Asc, Desc.

        Key word "save" requires persistent entity, collection of entities or array of entities as parameter.
        Key word "delete" requires deleting entity, collection of entities or array of entities as parameter.
        Key word "update" requires appropriate table name after itself.
        Key word "From" requires appropriate table name after itself.
        Key word "By" requires appropriate field name in the table and one value of the parameter after itself.
        Key word "Between" requires appropriate field name in the table and two parameter values after itself.
        Key word "Set" requires appropriate field name in the table and one parameter value after itself.
        Key word "OrderBy" requires appropriate field name in the table after itself.
        Key word "Join" requires appropriate table name after itself.
        Key word "On" requires appropriate field name in the table after itself.
        Fields in the tables must have equal names.

        For example:
        Entity findById(int id);
        Is similar to query
        SELECT * FROM entity WHERE id=id;

        void deleteFromEntityByName(String name);
        Is similar to query
        DELETE FROM entity WHERE name=name;

        void save(List<Entity> name);
        Is similar to query
        INSERT INTO entity VALUES (entity date 1);
        ...
        INSERT INTO entity VALUES (entity date n);

        void updateEntitySetIdByName(int id, String name);
        Is similar to query
        UPDATE entity SET name=name WHERE name=name;
