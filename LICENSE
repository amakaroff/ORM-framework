                                ORM-framework
                          version 1.0, February 2017
                                Documentation
    1.  Необходимо создать property file persistence.properties
        со следующим наполнением:

        driver="database driver"
        login="database login"
        password="database password"
        url="url database"

    2.  Для  отображения  java-сущностей  в  базе  данных  её  необходимо   пометить
        аннотацией   @Table,  и   внутри  отметить    необходимые  поля   аннотацией
        @Column  указав  внутри  них  соответствующие  таблицы и поля в базе данных.
        Для  соединения  внешних ключей с первичными  нужно  использовать  аннотации
        @OneToOne, @OneToMany, @ManyToOne и @JoinColumn.

    3.  В аннотациях @OneToOne, @OneToMany и @ManyToOne  указываем способ  подгрузки
        данной сущности из базы данных:
        FetchType.LAZY - для ленивой и FetchType.EAGER - для жадной
        В некоторых аннотациях нужно указать поля  другой  сущности с которыми будет
        соединяться текущая сущность.

    4.  Получение соединения с базой данных без отображения сущностей осуществляется
        из класса DataSourceLoader с помощью метода getConnection().

    5.  Простейшая   работа  с  таблицами   базы  данных  осуществляется  из  класса
        QueryExecutor при помощи методов save, findOne, findSome и executeQuery.

    6.  Создание динамических интерфейсов
        В интерфейсе  сигнатуру  метода  необходимо  пометить аннотацией @Query куда
        помещяется запрос. В запросе можно  указывать  передаваемые параметры в виде
        {название параметра} и и соответствующий параметр метода поменять аннотацией
        @Param куда записывать соответствующее название параметра.

        Например:
        @Query (SELECT * FROM entity WHERE id={id} AND name={name})
        Entity selectEntity(@Param("id") int id, @Param("name") String name);

        Так-же    имплементация    интерфеса   позволяет   генерировать   sql-запросы
        по названию метода составленного из ключевых слов.

        Список ключевых слов:
        find, save, delete,  update,  From,  And,  Or, By,  Between, Set, Left, Right,
        Inner, Join, On, OrderBy, Asc, Desc.

        Ключевое  слово  "save"  требует  в  парметр  сохраняемую  сущность, коллекцию
        сущностей или массив сущностей.
        Ключевое  слово  "delete"  позволяет  принимать  в параметр удаляемую сущность,
        коллекцию сущностей или массив сущностей.
        Ключевое слово "update" требует после себя соответствующее название таблицы.
        Ключевое слово "From" требует после себя соответствующее название таблицы.
        Ключевое слово "By" требует после себя соответствующее название поля в таблице,
        а так-же одно значение параметра.
        Ключевое слово "Between"  требует  после  себя  соответствующее  название  поля
        в таблице, а так-же два значения параметра
        Ключевое  слово  "Set"  требует  после   себя   соответствующее  название  поля
        в таблице, а так-же одно значение параметра.
        Ключевое  слово  "OrderBy"  требует  после  себя  соответствующее название поля
        в таблице.
        Ключевое слово "Join" требует после себя соответствующее название таблицы.
        Ключевое слово "On" требует после  себя соответствующее название поля в таблице.
        Поля в таблицах должны иметь одинаковое название.

        Напимер:
        Entity findById(int id);
        Эквивалентно запросу
        SELECT * FROM entity WHERE id=id;

        void deleteFromEntityByName(String name);
        Эквивалентно запросу
        DELETE FROM entity WHERE name=name;

        void save(List<Entity> name);
        Эквивалентно запросу
        INSERT INTO entity VALUES (данные);

        void updateEntitySetIdByName(int id, String name);
        Эквивалентно запросу
        DELETE FROM entity WHERE name=name;
